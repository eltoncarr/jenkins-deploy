---
- name: Installing git
  apt:
    name: git
    state: present
  tags:
    - install
    - git

- name: Add user
  user:
    name: "{{ repo_owner }}"
    append: True
  register: user_info
  tags:
    - install
    - git
    - user

- name: Set git_clone_dest_dir fact
  set_fact:
    git_clone_dest_dir: "{{ user_info.home }}/{{ COMMON_GIT_REPO }}"
  tags:
    - install
    - git
    - user

- name: Set git_clone_dest_dir fact to repo_dest_dir if defined
  set_fact:
    git_clone_dest_dir: "{{ repo_dest_dir }}"
  when: repo_dest_dir is defined
  tags:
    - install
    - git

- name: Set git_home fact
  set_fact:
    git_home: "{{ user_info.home }}"
  tags:
    - install
    - git
    - user

- name: Create .ssh
  file:
    path: "{{ git_home }}/.ssh"
    state: directory
    mode: 0700
    owner: "{{ repo_owner }}"
    group: "{{ repo_owner }}"
  become: true
  become_user: "{{ repo_owner }}"

- name: Set git fetch.prune to ignore deleted remote refs
  shell: git config --global fetch.prune true
  become: true
  become_user: "{{ repo_owner }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  when: GIT_REPOS|length > 0
  tags:
    - install
    - install:code

- name: Validate git protocol
  fail:
    msg: '{{ GIT_REPOS.PROTOCOL }} must be "https" or "ssh"'
  when: (item.PROTOCOL != "https") and (item.PROTOCOL != "ssh") and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Install read-only ssh key
  copy:
    dest: "{{ git_home }}/.ssh/{{ item.REPO }}"
    src: "{{ item.SSH_KEY_PATH }}"
    owner: "{{ repo_owner }}"
    group: "{{ repo_group }}"
    mode: "0600"
  become: true
  become_user: "{{ repo_owner }}"
  when: item.PROTOCOL == "ssh" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Checkout code over ssh
  git:
    repo: "git@{{ item.DOMAIN }}:{{ item.PATH }}/{{ item.REPO }}"
    dest: "{{ item.DESTINATION }}"
    version: "{{ item.VERSION }}"
    accept_hostkey: yes
    key_file: "{{ git_home }}/.ssh/{{ item.REPO }}"
    force: yes
    update: yes
  become: true
  become_user: "{{ repo_owner }}"
  register: code_checkout
  when: item.PROTOCOL == "ssh" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Remove read-only ssh key
  file:
    dest: "{{ git_home }}/.ssh/{{ item.REPO }}"
    state: absent
  when: item.PROTOCOL == "ssh" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  become: true
  become_user: "{{ repo_owner }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Checkout code over https
  git:
    repo: "https://{{ item.DOMAIN }}/{{ item.PATH }}/{{ item.REPO }}"
    dest: "{{ item.DESTINATION }}"
    version: "{{ item.VERSION }}"
    force: yes
  become: true
  become_user: "{{ repo_owner }}"
  register: code_checkout
  when: item.PROTOCOL == "https" and GIT_REPOS is defined
  with_items: "{{ GIT_REPOS }}"
  no_log: "{{ GIT_CLONE_NO_LOGGING }}"
  tags:
    - install
    - install:code

- name: Run git clean after checking out code
  shell: cd {{ item.DESTINATION }} && git clean -xdf
  become: true
  become_user: "{{ repo_owner }}"
  with_items: "{{ GIT_REPOS }}"
  tags:
    - install
    - install:code

